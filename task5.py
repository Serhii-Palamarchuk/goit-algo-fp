# –ó–∞–≤–¥–∞–Ω–Ω—è 5. –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ö–æ–¥—É –±—ñ–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–¥ —ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è 4 –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –±—ñ–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É –Ω–∞ Python, —è–∫–∞ –≤—ñ–∑—É–∞–ª—ñ–∑—É—î –æ–±—Ö–æ–¥–∏ –¥–µ—Ä–µ–≤–∞: —É –≥–ª–∏–±–∏–Ω—É —Ç–∞ –≤ —à–∏—Ä–∏–Ω—É.
# –í–æ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –∫–æ–∂–µ–Ω –∫—Ä–æ–∫ —É –≤—É–∑–ª–∞—Ö –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∫–æ–ª—å–æ—Ä–∞–º–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ 16-—Å–∏—Å—Ç–µ–º—É RGB (–ø—Ä–∏–∫–ª–∞–¥ #1296F0). 
# –ö–æ–ª—å–æ—Ä–∏ –≤—É–∑–ª—ñ–≤ –º–∞—é—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è –≤—ñ–¥ —Ç–µ–º–Ω–∏—Ö –¥–æ —Å–≤—ñ—Ç–ª–∏—Ö –≤—ñ–¥—Ç—ñ–Ω–∫—ñ–≤, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ –æ–±—Ö–æ–¥—É. 
# –ö–æ–∂–µ–Ω –≤—É–∑–æ–ª –ø—Ä–∏ –π–æ–≥–æ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—ñ –º–∞—î –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–ª—ñ—Ä, —è–∫–∏–π –≤—ñ–∑—É–∞–ª—å–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ö–æ–¥—É.
# üëâüèª –ü—Ä–∏–º—ñ—Ç–∫–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å—Ç–µ–∫ —Ç–∞ —á–µ—Ä–≥—É, –ù–ï —Ä–µ–∫—É—Ä—Å—ñ—é

import uuid
import networkx as nx
import matplotlib.pyplot as plt
from collections import deque


class Node:
    def __init__(self, key, color="skyblue"):
        self.left = None
        self.right = None
        self.val = key
        self.color = color  # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –≤—É–∑–ª–∞
        self.id = str(uuid.uuid4())  # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≤—É–∑–ª–∞


def add_edges(graph, node, pos, x=0, y=0, layer=1):
    if node is not None:
        graph.add_node(node.id, color=node.color, label=node.val)  # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è id —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –≤—É–∑–ª–∞
        if node.left:
            graph.add_edge(node.id, node.left.id)
            l = x - 1 / 2 ** layer
            pos[node.left.id] = (l, y - 1)
            l = add_edges(graph, node.left, pos, x=l, y=y - 1, layer=layer + 1)
        if node.right:
            graph.add_edge(node.id, node.right.id)
            r = x + 1 / 2 ** layer
            pos[node.right.id] = (r, y - 1)
            r = add_edges(graph, node.right, pos, x=r, y=y - 1, layer=layer + 1)
    return graph


def draw_tree(tree_root, highlight_node=None, title="Binary Tree Visualization"):
    tree = nx.DiGraph()
    pos = {tree_root.id: (0, 0)}
    tree = add_edges(tree, tree_root, pos)

    colors = ["#1296F0" if node[0] == highlight_node else node[1]['color'] for node in tree.nodes(data=True)]
    labels = {node[0]: node[1]['label'] for node in tree.nodes(data=True)}  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—É–∑–ª–∞ –¥–ª—è –º—ñ—Ç–æ–∫

    plt.figure(figsize=(8, 5))
    nx.draw(tree, pos=pos, labels=labels, arrows=False, node_size=2500, node_color=colors)
    plt.suptitle(title)
    plt.show()


def build_heap(arr):
    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –±—ñ–Ω–∞—Ä–Ω–æ—ó –∫—É–ø–∏ –∑ –º–∞—Å–∏–≤—É
    if not arr:
        return None

    nodes = [Node(key) for key in arr]
    n = len(nodes)

    for i in range(n):
        left_index = 2 * i + 1
        right_index = 2 * i + 2

        if left_index < n:
            nodes[i].left = nodes[left_index]
        if right_index < n:
            nodes[i].right = nodes[right_index]

    return nodes[0]


def visualize_dfs(tree_root):
    stack = [tree_root]
    visited = set()
    step = 0

    while stack:
        current = stack.pop()
        if current.id not in visited:
            visited.add(current.id)
            # –ó–º—ñ–Ω–∞ –∫–æ–ª—å–æ—Ä—É –≤—É–∑–ª–∞ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –ø–æ—Ä—è–¥–∫—É –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è
            current.color = "#" + format(255 - step * 15, '02x') * 3
            step += 1
            draw_tree(tree_root, highlight_node=current.id, title="Depth-First Search (DFS) Visualization")

            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É —Å—Ç–µ–∫ (–ø—Ä–∞–≤–∏–π —Å–ø–æ—á–∞—Ç–∫—É, —â–æ–± –ª—ñ–≤–∏–π –±—É–≤ –∑–≤–µ—Ä—Ö—É)
            if current.right:
                stack.append(current.right)
            if current.left:
                stack.append(current.left)


def visualize_bfs(tree_root):
    queue = deque([tree_root])
    visited = set()
    step = 0

    while queue:
        current = queue.popleft()
        if current.id not in visited:
            visited.add(current.id)
            # –ó–º—ñ–Ω–∞ –∫–æ–ª—å–æ—Ä—É –≤—É–∑–ª–∞ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –ø–æ—Ä—è–¥–∫—É –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è
            current.color = "#" + format(255 - step * 15, '02x') * 3
            step += 1
            draw_tree(tree_root, highlight_node=current.id, title="Breadth-First Search (BFS) Visualization")

            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É —á–µ—Ä–≥—É (–ª—ñ–≤–∏–π –ø–æ—Ç—ñ–º –ø—Ä–∞–≤–∏–π)
            if current.left:
                queue.append(current.left)
            if current.right:
                queue.append(current.right)


# –ü—Ä–∏–∫–ª–∞–¥ –ø–æ–±—É–¥–æ–≤–∏ –∫—É–ø–∏
heap_array = [0, 4, 1, 5, 10, 3]
root = build_heap(heap_array)

# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ö–æ–¥—É –≤ –≥–ª–∏–±–∏–Ω—É
visualize_dfs(root)

# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ö–æ–¥—É –≤ —à–∏—Ä–∏–Ω—É
visualize_bfs(root)
